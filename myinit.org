#+STARTUP: overview



* interface tweaks
  #+BEGIN_SRC emacs-lisp
    (column-number-mode t)
    (setq indent-tabs-mode nil)
    (tool-bar-mode -1)
    ;; (setq electric-pair-mode t)
    (global-set-key (kbd "<f5>") 'revert-buffer)
    ;; (setq inhibit-startup-message t)
    ;; (fset 'yes-or-no-p 'y-or-n-p)

    ;; Set Cursor Color
    (set-cursor-color "red")

    ;; Death to the ^M
    (defun remove-dos-eol ()
      "Removes the disturbing '^M' showing up in files containing mixed UNIX and DOS line endings."
      (interactive)
      (setq buffer-display-table (make-display-table))
      (aset buffer-display-table ?\^M []))

    ;; A central place for backup files
    (push '("." . "~/.emacs/backups") backup-directory-alist)

    ;; Make editor calls in remote shells with local emacs
    ;; with-editor is a magit dependancy
    ;; (add-hook 'shell-mode-hook 'with-editor-export-editor)

    ;; blocks cursor-type customization if non-nil, triggered by some accessibility APIs
    (setq w32-use-visible-system-caret nil)
  #+END_SRC

* try
  #+BEGIN_SRC emacs-lisp
    (use-package try
      :ensure t)
  #+END_SRC

* which key
  Brings up some help
  #+BEGIN_SRC emacs-lisp
  (use-package which-key
	:ensure t 
	:config
	(which-key-mode))
  #+END_SRC


* Org mode
  Org bullets makes things look pretty
  #+BEGIN_SRC emacs-lisp
  (use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  #+END_SRC
* ibuffer
  #+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  #+END_SRC
* Ace windows for easy window switching
  #+BEGIN_SRC emacs-lisp
  (use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
    ))
  #+END_SRC

* Swiper / Ivy / Counsel
  Swiper gives us a really efficient incremental search with regular expressions
  and Ivy / Counsel replace a lot of ido or helms completion functionality
  #+BEGIN_SRC emacs-lisp

    (use-package counsel
      :ensure t
      :bind
      (("M-y" . counsel-yank-pop)
       :map ivy-minibuffer-map
       ("M-y" . ivy-next-line)))

    (use-package ivy
      :ensure t
      :diminish (ivy-mode)
      :bind (("C-x b" . ivy-switch-buffer))
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      ;(setq ivy-count-format "%d/%d ")
      (setq ivy-display-style 'fancy))


    (use-package swiper
      :ensure try
      :bind (("C-s" . swiper)
	     ("C-r" . swiper)
	     ("C-c C-r" . ivy-resume)
	     ("M-x" . counsel-M-x)
	     ("C-x C-f" . counsel-find-file))
      :config
      (progn
	(ivy-mode 1)
	(setq ivy-use-virtual-buffers t)
	(setq ivy-display-style 'fancy)
	(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
	))
  #+END_SRC

* Avy - navigate by searching for a letter on the screen and jumping to it
  See https://github.com/abo-abo/avy for more info
  #+BEGIN_SRC emacs-lisp
  (use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-word-1)) ;; changed from char as per jcs
  #+END_SRC

* Hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra 
    :ensure hydra
    :init 
    (global-set-key
    (kbd "C-x t")
	    (defhydra toggle (:color blue)
	      "toggle"
	      ("a" abbrev-mode "abbrev")
	      ("s" flyspell-mode "flyspell")
	      ("d" toggle-debug-on-error "debug")
	      ("c" fci-mode "fCi")
	      ("f" auto-fill-mode "fill")
	      ("t" toggle-truncate-lines "truncate")
	      ("w" whitespace-mode "whitespace")
	      ("q" nil "cancel")))
    (global-set-key
     (kbd "C-x j")
     (defhydra gotoline 
       ( :pre (linum-mode 1)
	      :post (linum-mode -1))
       "goto"
       ("t" (lambda () (interactive)(move-to-window-line-top-bottom 0)) "top")
       ("b" (lambda () (interactive)(move-to-window-line-top-bottom -1)) "bottom")
       ("m" (lambda () (interactive)(move-to-window-line-top-bottom)) "middle")
       ("e" (lambda () (interactive)(end-of-buffer)) "end")
       ("c" recenter-top-bottom "recenter")
       ("n" next-line "down")
       ("p" (lambda () (interactive) (forward-line -1))  "up")
       ("g" goto-line "goto-line")
       ))
    (global-set-key
     (kbd "C-c t")
     (defhydra hydra-global-org (:color blue)
       "Org"
       ("t" org-timer-start "Start Timer")
       ("s" org-timer-stop "Stop Timer")
       ("r" org-timer-set-timer "Set Timer") ; This one requires you be in an orgmode doc, as it sets the timer for the header
       ("p" org-timer "Print Timer") ; output timer value to buffer
       ("w" (org-clock-in '(4)) "Clock-In") ; used with (org-clock-persistence-insinuate) (setq org-clock-persist t)
       ("o" org-clock-out "Clock-Out") ; you might also want (setq org-log-note-clock-out t)
       ("j" org-clock-goto "Clock Goto") ; global visit the clocked task
       ("c" org-capture "Capture") ; Don't forget to define the captures you want http://orgmode.org/manual/Capture.html
	     ("l" (or )rg-capture-goto-last-stored "Last Capture"))

     ))

(defhydra multiple-cursors-hydra (:hint nil)
  "
     ^Up^            ^Down^        ^Other^
----------------------------------------------
[_p_]   Next    [_n_]   Next    [_l_] Edit lines
[_P_]   Skip    [_N_]   Skip    [_a_] Mark all
[_M-p_] Unmark  [_M-n_] Unmark  [_r_] Mark by regexp
^ ^             ^ ^             [_q_] Quit
"
  ("l" mc/edit-lines :exit t)
  ("a" mc/mark-all-like-this :exit t)
  ("n" mc/mark-next-like-this)
  ("N" mc/skip-to-next-like-this)
  ("M-n" mc/unmark-next-like-this)
  ("p" mc/mark-previous-like-this)
  ("P" mc/skip-to-previous-like-this)
  ("M-p" mc/unmark-previous-like-this)
  ("r" mc/mark-all-in-region-regexp :exit t)
  ("q" nil)

  ("<mouse-1>" mc/add-cursor-on-click)
  ("<down-mouse-1>" ignore)
  ("<drag-mouse-1>" ignore))

#+END_SRC

#+RESULTS:
* Autocomplete
  #+BEGIN_SRC emacs-lisp
  (use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))
  #+END_SRC

* iedit and narrow / widen dwim
  #+BEGIN_SRC emacs-lisp
    (use-package iedit
      :ensure t)
    ;; mark and edit all copies of the marked region simultaniously. 
    (use-package iedit
      :ensure t)

    ;; if you're windened, narrow to the region, if you're narrowed, widen
    ;; bound to C-x n
    (defun narrow-or-widen-dwim (p)
      "If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
    Intelligently means: region, org-src-block, org-subtree, or defun,
    whichever applies first.
    Narrowing to org-src-block actually calls `org-edit-src-code'.

    With prefix P, don't widen, just narrow even if buffer is already
    narrowed."
      (interactive "P")
      (declare (interactive-only))
      (cond ((and (buffer-narrowed-p) (not p)) (widen))
	    ((region-active-p)
	     (narrow-to-region (region-beginning) (region-end)))
	    ((derived-mode-p 'org-mode)
	     ;; `org-edit-src-code' is not a real narrowing command.
	     ;; Remove this first conditional if you don't want it.
	     (cond ((ignore-errors (org-edit-src-code))
		    (delete-other-windows))
		   ((org-at-block-p)
		    (org-narrow-to-block))
		   (t (org-narrow-to-subtree))))
	    (t (narrow-to-defun))))

    ;; (define-key endless/toggle-map "n" #'narrow-or-widen-dwim)
    ;; This line actually replaces Emacs' entire narrowing keymap, that's
    ;; how much I like this command. Only copy it if that's what you want.
    (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
  #+END_SRC

* Dumb jump
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :bind (("M-g o" . dumb-jump-go-other-window)
	   ("M-g j" . dumb-jump-go)
	   ("M-g x" . dumb-jump-go-prefer-external)
	   ("M-g z" . dumb-jump-go-prefer-external-other-window))
    :config 
    ;; (setq dumb-jump-selector 'ivy) ;; (setq dumb-jump-selector 'helm)
    :init
    (dumb-jump-mode)
    :ensure
    )
#+END_SRC
* git
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :init
    (progn
      (bind-key "C-x g" 'magit-status)
      ))

  (use-package git-gutter
    :ensure t
    :init
    (global-git-gutter-mode +1))

  (global-set-key (kbd "M-g M-g") 'hydra-git-gutter/body)


  (use-package git-timemachine
    :ensure t
    )
  (defhydra hydra-git-gutter (:body-pre (git-gutter-mode 1)
					:hint nil)
    "
  Git gutter:
    _j_: next hunk        _s_tage hunk     _q_uit
    _k_: previous hunk    _r_evert hunk    _Q_uit and deactivate git-gutter
    ^ ^                   _p_opup hunk
    _h_: first hunk
    _l_: last hunk        set start _R_evision
  "
    ("j" git-gutter:next-hunk)
    ("k" git-gutter:previous-hunk)
    ("h" (progn (goto-char (point-min))
		(git-gutter:next-hunk 1)))
    ("l" (progn (goto-char (point-min))
		(git-gutter:previous-hunk 1)))
    ("s" git-gutter:stage-hunk)
    ("r" git-gutter:revert-hunk)
    ("p" git-gutter:popup-hunk)
    ("R" git-gutter:set-start-revision)
    ("q" nil :color blue)
    ("Q" (progn (git-gutter-mode -1)
		;; git-gutter-fringe doesn't seem to
		;; clear the markup right away
		(sit-for 0.1)
		(git-gutter:clear))
     :color blue))
#+END_SRC
* Misc
  #+BEGIN_SRC emacs-lisp
    ;; expand the marked region in semantic increments (negative prefix to reduce region)
    (use-package expand-region
      :ensure t
      :config 
      (global-set-key (kbd "C-=") 'er/expand-region))

    ;; Save clipboard strings into kill ring before replacing them
    (setq save-interprogram-paste-before-kill t)

    ;; automatically reload files changed on disk
    ;; (global-auto-revert-mode 1) ;; you might not want this
    ;; (setq auto-revert-remote-files t) ;; or this
    ;; (setq auto-revert-verbose nil) ;; or this
    (global-set-key (kbd "<f5>") 'revert-buffer)

  #+END_SRC

* Load other files
  #+BEGIN_SRC emacs-lisp
    ;; (defun load-if-exists (f)
    ;;   "load the elisp file only if it exists and is readable"
    ;;   (if (file-readable-p f)
    ;;       (load-file f)))

    (load-if-exists "~/.emacs.d/my-site-specific-config.el")
    (load-if-exists "~/Dropbox/shared/not-for-github.el")
  #+END_SRC

* Undo Tree
  #+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :ensure t
      :init
      (global-undo-tree-mode))
  #+END_SRC

* Tramp
  #+BEGIN_SRC emacs-lisp
    ;; by default desktop doesn't save Tramp buffers, let's change that
    ;;(setq desktop-files-not-to-save "^$")
    (setq desktop-buffers-not-to-save "^$")

    ;; Automatically save and restore sessions
    (setq desktop-dirname             "~/.emacs.d/desktop/"
	  desktop-base-file-name      ".emacs.desktop"
	  desktop-base-lock-name      "lock"
	  desktop-path                (list desktop-dirname)
	  desktop-save                t
	  desktop-files-not-to-save   "^$" ;reload tramp paths
	  desktop-load-locked-desktop nil
	  desktop-auto-save-timeout   30)
    (desktop-save-mode 0)

    (defun my-desktop ()
      "Load the desktop and enable autosaving"
      (interactive)
      (let ((desktop-load-locked-desktop "ask"))
	(desktop-read)
	(desktop-save-mode 1)))

    ;; Tramp stuff
    ;; make sure to set: export PS1="[\h:\w] $ "
    ;;  in .bashrc for dirtrack to work
    (set-variable 'dirtrack-list '("^.*[^ ]+:\\(.*\\)]" 1 nil))
    (dirtrack-mode 1)
    ;; (setq ssh-mode-hook 'ssh-directory-tracking-mode)
  #+END_SRC
* C++
  #+BEGIN_SRC emacs-lisp
    (use-package google-c-style
      ;; :defer t
      :ensure t
      :config
      (add-hook 'c-mode-common-hook 'google-set-c-style)
      (add-hook 'c-mode-common-hook 'google-make-newline-indent))
    ;; (load "~/.emacs.d/packages/google-c-style.el")
    ;; (require 'google-c-style)
    ;; (add-hook 'c-mode-common-hook 'google-c-style)
    ;; (add-hook 'c-mode-common-hook 'google-make-newline-indent)
  #+END_SRC
* VHDL
  #+BEGIN_SRC emacs-lisp
    (setq vhdl-electric-mode t)
    (setq vhdl-indent-tabs-mode t)
    (setq vhdl-standard (quote (93 nil)))
    (setq vhdl-stutter-mode t)
  #+END_SRC
* Themes
  #+BEGIN_SRC emacs-lisp

    ;; (use-package color-theme
    ;; :ensure t)

    ;; (use-package zenburn-theme
    ;; :ensure t
    ;; :config (load-theme 'zenburn t))
  #+END_SRC
