#+STARTUP: overview



* interface tweaks
  #+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<f5>") 'revert-buffer)
  #+END_SRC

* try
  #+BEGIN_SRC emacs-lisp
    (use-package try
      :ensure t)
  #+END_SRC

* which key
  Brings up some help
  #+BEGIN_SRC emacs-lisp
  (use-package which-key
	:ensure t 
	:config
	(which-key-mode))
  #+END_SRC


* Org mode
  Org bullets makes things look pretty
  #+BEGIN_SRC emacs-lisp
  (use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  #+END_SRC
* ibuffer
  #+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  #+END_SRC
* Ace windows for easy window switching
  #+BEGIN_SRC emacs-lisp
  (use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
    ))
  #+END_SRC

* Swiper / Ivy / Counsel
  Swiper gives us a really efficient incremental search with regular expressions
  and Ivy / Counsel replace a lot of ido or helms completion functionality
  #+BEGIN_SRC emacs-lisp

    (use-package counsel
      :ensure t
      :bind
      (("M-y" . counsel-yank-pop)
       :map ivy-minibuffer-map
       ("M-y" . ivy-next-line)))

    (use-package ivy
      :ensure t
      :diminish (ivy-mode)
      :bind (("C-x b" . ivy-switch-buffer))
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      ;(setq ivy-count-format "%d/%d ")
      (setq ivy-display-style 'fancy))


    (use-package swiper
      :ensure try
      :bind (("C-s" . swiper)
	     ("C-r" . swiper)
	     ("C-c C-r" . ivy-resume)
	     ("M-x" . counsel-M-x)
	     ("C-x C-f" . counsel-find-file))
      :config
      (progn
	(ivy-mode 1)
	(setq ivy-use-virtual-buffers t)
	(setq ivy-display-style 'fancy)
	(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
	))
  #+END_SRC

* Avy - navigate by searching for a letter on the screen and jumping to it
  See https://github.com/abo-abo/avy for more info
  #+BEGIN_SRC emacs-lisp
  (use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-word-1)) ;; changed from char as per jcs
  #+END_SRC

* Autocomplete
  #+BEGIN_SRC emacs-lisp
  (use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))
  #+END_SRC

* iedit and narrow / widen dwim
  #+BEGIN_SRC emacs-lisp
    (use-package iedit
      :ensure t)
    ;; mark and edit all copies of the marked region simultaniously. 
    (use-package iedit
      :ensure t)

    ;; if you're windened, narrow to the region, if you're narrowed, widen
    ;; bound to C-x n
    (defun narrow-or-widen-dwim (p)
      "If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
    Intelligently means: region, org-src-block, org-subtree, or defun,
    whichever applies first.
    Narrowing to org-src-block actually calls `org-edit-src-code'.

    With prefix P, don't widen, just narrow even if buffer is already
    narrowed."
      (interactive "P")
      (declare (interactive-only))
      (cond ((and (buffer-narrowed-p) (not p)) (widen))
	    ((region-active-p)
	     (narrow-to-region (region-beginning) (region-end)))
	    ((derived-mode-p 'org-mode)
	     ;; `org-edit-src-code' is not a real narrowing command.
	     ;; Remove this first conditional if you don't want it.
	     (cond ((ignore-errors (org-edit-src-code))
		    (delete-other-windows))
		   ((org-at-block-p)
		    (org-narrow-to-block))
		   (t (org-narrow-to-subtree))))
	    (t (narrow-to-defun))))

    ;; (define-key endless/toggle-map "n" #'narrow-or-widen-dwim)
    ;; This line actually replaces Emacs' entire narrowing keymap, that's
    ;; how much I like this command. Only copy it if that's what you want.
    (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
  #+END_SRC

* Misc
  #+BEGIN_SRC emacs-lisp
    ;; expand the marked region in semantic increments (negative prefix to reduce region)
    (use-package expand-region
      :ensure t
      :config 
      (global-set-key (kbd "C-=") 'er/expand-region))

    ;; Save clipboard strings into kill ring before replacing them
    (setq save-interprogram-paste-before-kill t)

    ;; automatically reload files changed on disk
    ;; (global-auto-revert-mode 1) ;; you might not want this
    ;; (setq auto-revert-remote-files t) ;; or this
    ;; (setq auto-revert-verbose nil) ;; or this
    (global-set-key (kbd "<f5>") 'revert-buffer)

  #+END_SRC

* Load other files
  #+BEGIN_SRC emacs-lisp
    (defun load-if-exists (f)
      "load the elisp file only if it exists and is readable"
      (if (file-readable-p f)
	  (load-file f)))

    (load-if-exists "~/.emacs.d/my-site-specific-config.el")
    (load-if-exists "~/Dropbox/shared/not-for-github.el")
  #+END_SRC

* Undo Tree
  #+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :ensure t
      :init
      (global-undo-tree-mode))
  #+END_SRC

* Themes
  #+BEGIN_SRC emacs-lisp

    ;; (use-package color-theme
    ;; :ensure t)

    ;; (use-package zenburn-theme
    ;; :ensure t
    ;; :config (load-theme 'zenburn t))
  #+END_SRC
